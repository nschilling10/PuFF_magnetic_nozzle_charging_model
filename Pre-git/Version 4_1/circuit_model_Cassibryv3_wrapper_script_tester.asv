%% Wrapper script for testing Cassibryv3
% Nathan Schilling
% 02/19/20
%clear all
close all
% Universal constants
g0=9.8066; %[g0]=m/s^2
Ru=8314.3; %[Ru]=J/k-mol-K
k_b=8.617333262145e-5; %[k_b]=eV/K
e=1.602176634e-19; %[e]=J/eV
eps0=8.8541878128e-12; %[eps0]=SI units
mu_0=4*pi*1e-7; %[mu_0]=SI units
c=299792458; %[c]=m/s
h=6.62607015e-34; %[h]=J*s
m_a=1.6605e-27; %[m_a]=kg/u
m_e=9.10938356e-31; %[m_e]=kg
N_A=6.02214076e23; %[N_A]=#/mol
% Problem input parameters
l_0=100e-9;
R=0;
%C=400e-6;
C=4e-3;
input.l_1=l_0;
input.l_2=l_0;
input.R_1=R;
input.R_2=R;
input.C=C;
% Transformer params
mu_r=1;
r_T=0.1; %[r]=m
N_T1=40;
l_T1=1; %[l_T1]=m
input.L_1=mu_0*mu_r*(pi*r_T^2)*N_T1.^2/l_T1;

N_T2=1;
l_T2=3; %[l_T1]=m
input.L_2=mu_0*mu_r*(pi*r_T^2)*N_T2.^2/l_T2;

input.k_1=0.9;
% Seed coils params
mu_r=1;
N_Fcc=10;
input.r_Fcc=3.4; %[r_Fcc]=m
input.L_Fcc=mu_0*mu_r*pi*input.r_Fcc*N_Fcc^2;
B=@(I1) mu_0*mu_r*N_Fcc*I1/input.r_Fcc;
input.P_mag=@(I1) B(I1)^2/(2*mu_0);
k_2=0.5;

input.I0=10e6;
% Plasma params
yield=10e6; %[yield]=J
input.m_p=0.05; %[m_p]=kg
Rp0=1e-2;
N_p=1;

T=yield/e; %[T]=eV
g=1.3;
MW=4; % need this

V_0=pi*Rp0^2*input.r_Fcc; % note this stands for the inital volume of the plasma -> plasma is cylindrical
rho_0=input.m_p/V_0;
n_0=rho_0*(N_A/MW);
% n_0=input.P_mag/yield;
lambda_D=(eps0*yield/(n_0*e^2))^0.5;
Lambda=12*pi*n_0*lambda_D^3;
input.Eta=(pi*e^2*m_e^0.5/((4*pi*eps0)^2*(yield)^(3/2)))*log(Lambda);

input.Rp0=Rp0;
input.vp0=sqrt(2*yield/input.m_p);
% R_gas=Ru/MW;
% input.vp0=sqrt(g*R_gas*2*T);

input.Lp_r_hand=@(r) (mu_0*mu_r*N_p^2*pi/2)*r;
input.M2_Lp_hand=@(Lp) k_2*sqrt(input.L_Fcc*Lp);
input.dLp_dt_v_hand=@(v) (mu_0*mu_r*N_p^2*pi/2)*v;
input.dM2_Lp_v_hand=@(Lp, v) k_2*sqrt(input.L_Fcc)*0.5*Lp.^-0.5.*input.dLp_dt_v_hand(v);

M_2_0=k_2*sqrt(input.L_Fcc*input.Lp_r_hand(input.Rp0));

tauPerc=4;

input.tau=tauPerc*input.r_Fcc/input.vp0;

[t,I_1,V_Cap,I_2,I_4,Rp_vec,Vp_vec] = circuitModelFunction_V_Cassibry3(input);
%%
t=t(1:1e3:end);
I_1=I_1(1:1e3

[V_Cap_maxVal,V_Cap_maxInd]=max(V_Cap);
E_cap=0.5*input.C*(V_Cap_maxVal^2-V_Cap(1)^2);

% Calulcate current changes
Lp_vec=input.Lp_r_hand(Rp_vec);
dL_p=input.dLp_dt_v_hand(Vp_vec);
M2_vec=input.M2_Lp_hand(Lp_vec);
dM2_vec=input.dM2_Lp_v_hand(Lp_vec,Vp_vec);
eta_l=input.Eta*2*pi*Rp_vec;
L_c=input.L_Fcc;
M_1=input.k_1*sqrt(input.L_1*input.L_2);

dI1_vec=-(Lp_vec.*M_1.*V_Cap + I_1.*input.L_2.*Lp_vec.*input.R_1 + I_2.*Lp_vec.*M_1.*input.R_2 - I_4.*input.L_2.*Lp_vec.*dM2_vec...
    + I_4.*input.L_2.*M2_vec.*dL_p - I_1.*input.L_2.*M2_vec.*dM2_vec + I_4.*input.L_2.*M2_vec.*eta_l + I_1.*Lp_vec.*input.R_1.*input.l_2...
    - I_4.*Lp_vec.*dM2_vec.*input.l_2 + I_4.*M2_vec.*dL_p.*input.l_2 - I_1.*M2_vec.*dM2_vec.*input.l_2 + I_4.*M2_vec.*eta_l.*input.l_2)...
    ./(input.L_1.*input.L_2.*Lp_vec - Lp_vec.*M_1.^2 - M2_vec.^2.*input.l_2 - input.L_2.*M2_vec.^2 + input.L_2.*L_c.*Lp_vec + ...
    input.L_1.*Lp_vec.*input.l_2 + input.L_2.*Lp_vec.*input.l_1 + L_c.*Lp_vec.*input.l_2 + Lp_vec.*input.l_1.*input.l_2);

dI2_dt=-(input.L_1.*Lp_vec.*V_Cap - M2_vec.^2.*V_Cap + L_c.*Lp_vec.*V_Cap + Lp_vec.*V_Cap.*input.l_1 ...
    - I_2.*M2_vec.^2.*input.R_2 + I_2.*input.L_1.*Lp_vec.*input.R_2 + I_2.*L_c.*Lp_vec.*input.R_2 + I_1.*Lp_vec.*M_1.*input.R_1 ...
    - I_4.*Lp_vec.*M_1.*dM2_vec + I_4.*M_1.*M2_vec.*dL_p - I_1.*M_1.*M2_vec.*dM2_vec + I_4.*M_1.*M2_vec.*eta_l...
    + I_2.*Lp_vec.*input.R_2.*input.l_1)/(input.L_1.*input.L_2.*Lp_vec - Lp_vec.*M_1.^2 - M2_vec.^2.*input.l_2 - input.L_2.*M2_vec.^2 ...
    + input.L_2.*L_c.*Lp_vec + input.L_1.*Lp_vec.*input.l_2 + input.L_2.*Lp_vec.*input.l_1 + L_c.*Lp_vec.*input.l_2 + Lp_vec.*input.l_1.*input.l_2);

dI4_dt=-(M_1.*M2_vec.*V_Cap - I_4.*M_1.^2.*dL_p + I_1.*M_1.^2.*dM2_vec - I_4.*M_1.^2.*eta_l...
    + I_1.*input.L_2.*M2_vec.*input.R_1 + I_2.*M_1.*M2_vec.*input.R_2 + I_4.*input.L_1.*input.L_2.*dL_p + I_4.*input.L_2.*L_c.*dL_p...
    - I_1.*input.L_1.*input.L_2.*dM2_vec - I_1.*input.L_2.*L_c.*dM2_vec - I_4.*input.L_2.*M2_vec.*dM2_vec + I_4.*input.L_1.*input.L_2.*eta_l...
    + I_4.*input.L_2.*L_c.*eta_l + I_1.*M2_vec.*input.R_1.*input.l_2 + I_4.*input.L_1.*dL_p.*input.l_2 + I_4.*input.L_2.*dL_p.*input.l_1...
    + I_4.*L_c.*dL_p.*input.l_2 - I_1.*input.L_1.*dM2_vec.*input.l_2 - I_1.*input.L_2.*dM2_vec.*input.l_1 - I_1.*L_c.*dM2_vec.*input.l_2...
    - I_4.*M2_vec.*dM2_vec.*input.l_2 + I_4.*input.L_1.*eta_l.*input.l_2 + I_4.*input.L_2.*eta_l.*input.l_1 + I_4.*L_c.*eta_l.*input.l_2...
    + I_4.*dL_p.*input.l_1.*input.l_2 - I_1.*dM2_vec.*input.l_1.*input.l_2 + I_4.*eta_l.*input.l_1.*input.l_2)...
    /(input.L_1.*input.L_2.*Lp_vec - Lp_vec.*M_1.^2 - M2_vec.^2.*input.l_2 - input.L_2.*M2_vec.^2 + input.L_2.*L_c.*Lp_vec + ...
    input.L_1.*Lp_vec.*input.l_2 + input.L_2.*Lp_vec.*input.l_1 + L_c.*Lp_vec.*input.l_2 + Lp_vec.*input.l_1.*input.l_2);

% Calculate energy of each component
E_Cap=0.5*input.C*V_Cap(1:V_Cap_maxInd).^2;

E_in=0.5*input.m_p*Vp_vec(end)^2-yield;

E_L1=0.5*input.L_1*I_1(1:V_Cap_maxInd).^2;
E_L2=0.5*input.L_2*I_2(1:V_Cap_maxInd).^2;
E_M=0.5*M_1*(I_1(1:V_Cap_maxInd)-I_2(1:V_Cap_maxInd)).^2;

E_l1=0.5*input.l_1*I_1(1:V_Cap_maxInd).^2;
E_l2=0.5*input.l_2*I_2(1:V_Cap_maxInd).^2;

E_R1=ones(V_Cap_maxInd,1);
for i=1:length(E_R1)
    if i == 1
        E_R1(i)=0;
    else
        E_R1(i)=-trapz(t(1:i),input.R_1*(I_1(1:i)).^2);
    end
end
E_R2=ones(V_Cap_maxInd,1);
for i=1:length(E_R2)
    if i == 1
        E_R2(i)=0;
    else
        E_R2(i)=-trapz(t(1:i),input.R_2*(I_2(1:i)).^2);
    end
end

E_tot=E_Cap+E_L1+E_L2+E_M+E_l1+E_l2+E_R1+E_R2;
G=E_cap/(E_in)
%% Plotting
h=figure(1);
plot(t*10^6,I_1*1e-6,t*10^6,I_2*1e-6)
grid on
xlabel('\textbf{Time since ignition, }\boldmath$\mu$\textbf{s}','interpreter','latex','fontsize',22)
ylabel('\textbf{Current, MA}','interpreter','latex','fontsize',22)
title('\textbf{Current vs. Time since ignition with load connected}','interpreter','latex','fontsize',22)
legend({'\boldmath $I_1$','\boldmath $I_2$'},'interpreter','latex','fontsize',18)
h.Children(2).LineWidth=2;
h.Children(2).FontSize=18;
set(findall(gca, 'Type', 'Line'),'LineWidth',2);
%xlim([0 10])

figure(2)
plot(t*10^6,V_Cap*1e-3)
grid on
title('\textbf{U(kV) vs. Time since ignition}','interpreter','latex')
xlabel('\textbf{Time since ignition (}{\boldmath$\mu$}\textbf{sec)}','interpreter','latex')
ylabel('\textbf{Voltage across capacitor \textup{U}(kV)}','interpreter','latex')
set(gca,'fontsize',28)
set(findall(gca, 'Type', 'Line'),'LineWidth',2);
%xlim([0 10])

% Domain of time from t=0 to t=V_Cap_max
t_max_domain=t(1:V_Cap_maxInd);

figure(3)
plot(t_max_domain*10^6,E_tot*10^-6)
xlabel('Time since ignition (\mus)')
ylabel('Total energy in the circuit (MJ)')

figure(4)
plot(t_max_domain*10^6,E_Cap*10^-6,t_max_domain*10^6,E_L1*10^-6,t_max_domain*10^6,E_L2*10^-6,t_max_domain*10^6,E_M*10^-6,t_max_domain*10^6,E_l1*10^-6,t_max_domain*10^6,E_l2*10^-6,t_max_domain*10^6,E_R1*10^-6,'r--',t_max_domain*10^6,E_R2*10^-6,'g--')
xlabel('Time since ignition (\mus)')
ylabel('Energy in component (MJ)')
legend('E_{Cap}','L_1','L_2', 'M','l_1','l_2','input.R_1','input.R_2','Location','Northeast')

figure(5)
plot(t_max_domain*10^6,E_Cap*10^-6,t_max_domain*10^6,E_L1*10^-6,t_max_domain*10^6,E_L2*10^-6,t_max_domain*10^6,E_M*10^-6)
xlabel('Time since ignition (\mus)')
ylabel('Energy in component (MJ)')
legend('E_{Cap}','L_1','L_2', 'M','Location','Northeast')

figure(6)
plot(t*1e6,Vp_vec*1e-3)
xlabel('Time since ignition (\mus)','fontsize',18)
ylabel('$v_{exp}$ (km/s)','interpreter','latex','fontsize',20)

figure(7)
plot(t*1e6,Rp_vec)
xlabel('Time since ignition (\mus)','fontsize',18)
ylabel('$R_{p}$ (m)','interpreter','latex','fontsize',20)